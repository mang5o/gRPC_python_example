# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import test_pb2 as test__pb2


class TestServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Test = channel.unary_unary(
                '/TestService/Test',
                request_serializer=test__pb2.TestRequest.SerializeToString,
                response_deserializer=test__pb2.TestResponse.FromString,
                )
        self.TestStream = channel.stream_stream(
                '/TestService/TestStream',
                request_serializer=test__pb2.TestRequest.SerializeToString,
                response_deserializer=test__pb2.TestResponse.FromString,
                )
        self.Upload = channel.stream_unary(
                '/TestService/Upload',
                request_serializer=test__pb2.FileChunk.SerializeToString,
                response_deserializer=test__pb2.TestResponse.FromString,
                )
        self.Download = channel.unary_stream(
                '/TestService/Download',
                request_serializer=test__pb2.TestRequest.SerializeToString,
                response_deserializer=test__pb2.FileChunk.FromString,
                )
        self.NestedTest = channel.unary_unary(
                '/TestService/NestedTest',
                request_serializer=test__pb2.NestedData.SerializeToString,
                response_deserializer=test__pb2.NestedData.FromString,
                )
        self.RefNestedTest = channel.unary_unary(
                '/TestService/RefNestedTest',
                request_serializer=test__pb2.RefNested.SerializeToString,
                response_deserializer=test__pb2.RefNested.FromString,
                )
        self.OneOfTest = channel.unary_unary(
                '/TestService/OneOfTest',
                request_serializer=test__pb2.OneOf.SerializeToString,
                response_deserializer=test__pb2.OneOf.FromString,
                )
        self.NotFilledTest = channel.unary_unary(
                '/TestService/NotFilledTest',
                request_serializer=test__pb2.NotFilled.SerializeToString,
                response_deserializer=test__pb2.NotFilled.FromString,
                )
        self.MapTest = channel.unary_unary(
                '/TestService/MapTest',
                request_serializer=test__pb2.MapMsg.SerializeToString,
                response_deserializer=test__pb2.MapMsg.FromString,
                )
        self.ImportTest = channel.unary_unary(
                '/TestService/ImportTest',
                request_serializer=test__pb2.importMsg.SerializeToString,
                response_deserializer=test__pb2.importMsg.FromString,
                )


class TestServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Upload(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Download(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NestedTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefNestedTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def OneOfTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotFilledTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MapTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ImportTest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=test__pb2.TestRequest.FromString,
                    response_serializer=test__pb2.TestResponse.SerializeToString,
            ),
            'TestStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TestStream,
                    request_deserializer=test__pb2.TestRequest.FromString,
                    response_serializer=test__pb2.TestResponse.SerializeToString,
            ),
            'Upload': grpc.stream_unary_rpc_method_handler(
                    servicer.Upload,
                    request_deserializer=test__pb2.FileChunk.FromString,
                    response_serializer=test__pb2.TestResponse.SerializeToString,
            ),
            'Download': grpc.unary_stream_rpc_method_handler(
                    servicer.Download,
                    request_deserializer=test__pb2.TestRequest.FromString,
                    response_serializer=test__pb2.FileChunk.SerializeToString,
            ),
            'NestedTest': grpc.unary_unary_rpc_method_handler(
                    servicer.NestedTest,
                    request_deserializer=test__pb2.NestedData.FromString,
                    response_serializer=test__pb2.NestedData.SerializeToString,
            ),
            'RefNestedTest': grpc.unary_unary_rpc_method_handler(
                    servicer.RefNestedTest,
                    request_deserializer=test__pb2.RefNested.FromString,
                    response_serializer=test__pb2.RefNested.SerializeToString,
            ),
            'OneOfTest': grpc.unary_unary_rpc_method_handler(
                    servicer.OneOfTest,
                    request_deserializer=test__pb2.OneOf.FromString,
                    response_serializer=test__pb2.OneOf.SerializeToString,
            ),
            'NotFilledTest': grpc.unary_unary_rpc_method_handler(
                    servicer.NotFilledTest,
                    request_deserializer=test__pb2.NotFilled.FromString,
                    response_serializer=test__pb2.NotFilled.SerializeToString,
            ),
            'MapTest': grpc.unary_unary_rpc_method_handler(
                    servicer.MapTest,
                    request_deserializer=test__pb2.MapMsg.FromString,
                    response_serializer=test__pb2.MapMsg.SerializeToString,
            ),
            'ImportTest': grpc.unary_unary_rpc_method_handler(
                    servicer.ImportTest,
                    request_deserializer=test__pb2.importMsg.FromString,
                    response_serializer=test__pb2.importMsg.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TestService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/Test',
            test__pb2.TestRequest.SerializeToString,
            test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/TestService/TestStream',
            test__pb2.TestRequest.SerializeToString,
            test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Upload(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/TestService/Upload',
            test__pb2.FileChunk.SerializeToString,
            test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Download(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/TestService/Download',
            test__pb2.TestRequest.SerializeToString,
            test__pb2.FileChunk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NestedTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/NestedTest',
            test__pb2.NestedData.SerializeToString,
            test__pb2.NestedData.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def RefNestedTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/RefNestedTest',
            test__pb2.RefNested.SerializeToString,
            test__pb2.RefNested.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def OneOfTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/OneOfTest',
            test__pb2.OneOf.SerializeToString,
            test__pb2.OneOf.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotFilledTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/NotFilledTest',
            test__pb2.NotFilled.SerializeToString,
            test__pb2.NotFilled.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MapTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/MapTest',
            test__pb2.MapMsg.SerializeToString,
            test__pb2.MapMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ImportTest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService/ImportTest',
            test__pb2.importMsg.SerializeToString,
            test__pb2.importMsg.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class TestService2Stub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Test = channel.unary_unary(
                '/TestService2/Test',
                request_serializer=test__pb2.TestRequest.SerializeToString,
                response_deserializer=test__pb2.TestResponse.FromString,
                )
        self.TestStream = channel.stream_stream(
                '/TestService2/TestStream',
                request_serializer=test__pb2.TestRequest.SerializeToString,
                response_deserializer=test__pb2.TestResponse.FromString,
                )


class TestService2Servicer(object):
    """Missing associated documentation comment in .proto file."""

    def Test(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TestService2Servicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Test': grpc.unary_unary_rpc_method_handler(
                    servicer.Test,
                    request_deserializer=test__pb2.TestRequest.FromString,
                    response_serializer=test__pb2.TestResponse.SerializeToString,
            ),
            'TestStream': grpc.stream_stream_rpc_method_handler(
                    servicer.TestStream,
                    request_deserializer=test__pb2.TestRequest.FromString,
                    response_serializer=test__pb2.TestResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TestService2', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TestService2(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Test(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TestService2/Test',
            test__pb2.TestRequest.SerializeToString,
            test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def TestStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/TestService2/TestStream',
            test__pb2.TestRequest.SerializeToString,
            test__pb2.TestResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
